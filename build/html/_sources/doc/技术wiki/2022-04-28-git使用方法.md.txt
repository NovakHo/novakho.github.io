# 2022-04-28-git使用方法
---
## 1.初次尝试
### 1.1创建账户与全局配置
---
```
#create account

git config --global user.name "novakho"
git config --global user.email "a249657557@gmail.com"
ssh-keygen -t rsa -C "a249657557@gmail.com"


git config -e    # 针对当前仓库 
git config -e --global   # 针对系统上所有仓库



#然后三个回车就可以了。
#(adsbygoogle = window.adsbygoogle || []).push({});
#然后在C:\Users\admin.ssh文件夹中找到id_rsa.pub,将里面所有的内容全部复制出来。
#open git shell and test connection

cd D:\91git
ssh git@github.com
```
### 1.2移动线上文件到特定文件夹-clone
---
```
#move files to folder
# download code
git clone https://github.com/NovakHo/novakho.github.io.git
git mv /pages/* /_posts/


git commit -m "test1"

#push to remote site
git remote -v
git remote rm origin

git remote -v
git remote add origin git@github.com:novakho/novakho.github.io.git
https://github.com/NovakHo/novakho.github.io.git
#修改url方法
git remote set-url origin git@code.aliyun.com:koclaadmin/erp_app.git

git remote -v
git push --set-upstream origin master
```
### 1.3 clone他人仓库操作并推送
---
```
git clone https://github.com/NovakHo/mzlogin.github.io.git
# do something 
git add .
git commit -m "test1"


#push to remote site
git remote -v
git remote rm origin

git remote -v
git remote add origin git@github.com:novakho/mzlogin.github.io.git

git remote -v
git push --set-upstream origin master

```
### 分支管理
```
#列分支
git branch
#拉分支
git pull origin master
#切分支
git checkout master
#合并分支newest到master分支中，确保newest和master分支不冲突
git merge newest
#删除newest分支，剩下的只有master分支
git branch -d newtest
```
### 配置ssh同时支持gitee和github
```
cd d:/91git/
ssh-keygen -t rsa -C 'a249657557@gmail.com' -f ~/.ssh/id_rsa_gitee

vi ~/.ssh/config

#gitee
Host gitee.com
HostName gitee.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa_gitee
#github
Host github.com
HostName github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa

#测试
ssh -T git@gitee.com
ssh -T git@github.com
```
### pull下来再回滚到特定commit
```
git remote -v
git remote rm origin
git remote add origin git@github.com:novakho/novakho.github.io.git
git pull origin master 
回滚最新的提交 ：git reset 和 git rebase 命令都可以
回滚中间某次提交： git rebase 可以， git reset 不可以
如果提交已经同步到远程仓库，需要使用git push origin -f branch(分支名)
来将回滚也同步到远程仓库（master 分支谨慎使用 -f）
```
### 关联离线zip到现有项目
```
unzip <repo>.zip
cd <repo>
git init
git add .
git remote add origin https://github.com/novakho/novakho.github.io.git
git remote update
git checkout master
```
我的csdn
[https://blog.csdn.net/Novak_Ho?type=blog](https://blog.csdn.net/Novak_Ho?type=blog)
我的github
novakho.github.io
我的gitee

### 报错Authentication failed for
```
git config --global user.name [username]
git config --global user.email [email]
git config --list
git config --system --unset credential.helper
```
## 2.命令大全
```
查看、添加、提交、删除、找回，重置修改文件
git help <command> # 显示command的help

git show # 显示某次提交的内容 git show $id

git co -- <file> # 抛弃工作区修改
git co . # 抛弃工作区修改

git add <file> # 将工作文件修改提交到本地暂存区

git add . # 将所有修改过的工作文件提交暂存区

git rm <file> # 从版本库中删除文件

git rm <file> --cached # 从版本库中删除文件，但不删除文件

git reset <file> # 从暂存区恢复到工作文件

git reset -- . # 从暂存区恢复到工作文件

git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改

git ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
git ci -am "some comments"

git ci --amend # 修改最后一次提交记录

git revert <$id> # 恢复某次提交的状态，恢复动作本身也创建次提交对象

git revert HEAD # 恢复最后一次提交的状态

查看文件diff


git help <command> # 显示command的help

git show # 显示某次提交的内容 git show $id

git co -- <file> # 抛弃工作区修改

git co . # 抛弃工作区修改

git add <file> # 将工作文件修改提交到本地暂存区

git add . # 将所有修改过的工作文件提交暂存区

git rm <file> # 从版本库中删除文件

git rm <file> --cached # 从版本库中删除文件，但不删除文件

git reset <file> # 从暂存区恢复到工作文件

git reset -- . # 从暂存区恢复到工作文件

git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改

git ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
git ci -am "some comments"

git ci --amend # 修改最后一次提交记录

git revert <$id> # 恢复某次提交的状态，恢复动作本身也创建次提交对象

git revert HEAD # 恢复最后一次提交的状态

查看提交记录

git log git log <file> # 查看该文件每次提交记录

git log -p <file> # 查看每次详细修改内容的diff

git log -p -2 # 查看最近两次详细修改内容的diff

git log --stat #查看提交统计信息
tig

Mac上可以使用tig代替diff和log，brew install tig


Git 本地分支管理
查看、切换、创建和删除分支


git br -r # 查看远程分支

git br <new_branch> # 创建新的分支

git br -v # 查看各个分支最后提交信息

git br --merged # 查看已经被合并到当前分支的分支

git br --no-merged # 查看尚未被合并到当前分支的分支

git co <branch> # 切换到某个分支

git co -b <new_branch> # 创建新的分支，并且切换过去

git co -b <new_branch> <branch> # 基于branch创建新的new_branch

git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除

git co $id -b <new_branch> # 把某次历史提交记录checkout出来，创建成一个分支

git br -d <branch> # 删除某个分支

git br -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)
 分支合并和reba
git merge <branch> # 将branch分支合并到当前分支

git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交

git rebase master <branch> # 将master rebase到branch，相当于： git co <branch> && git rebase master && git co master && git merge <branch>
 Git补丁管理(方便在多台机器上开发同步时用)


git merge <branch> # 将branch分支合并到当前分支

git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交

git rebase master <branch> # 将master rebase到branch，相当于： git co <branch> && git rebase master && git co master && git merge <branch>

 Git暂存管
git stash # 暂存

git stash list # 列所有stash

git stash apply # 恢复暂存的内容

git stash drop # 删除暂存区

Git远程分支管理

git pull # 抓取远程仓库所有分支更新并合并到本地

git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并

git fetch origin # 抓取远程仓库更新

git merge origin/master # 将远程主分支合并到本地当前分支

git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支

git co -b <local_branch> origin/<remote_branch> # 基于远程分支创建本地分支，功能同上

git push # push所有分支

git push origin master # 将本地主分支推到远程主分支

git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)

git push origin <local_branch> # 创建远程分支， origin是远程仓库名

git push origin <local_branch>:<remote_branch> # 创建远程分支

git push origin :<remote_branch> #先删除本地分支(git br -d <branch>)，然后再push删除远程分支

Git远程仓库管
git remote -v # 查看远程服务器地址和仓库名称

git remote show origin # 查看远程服务器仓库状态

git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址

git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm <repository> # 删除远程仓库

创建远程仓库

git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库

scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上

mkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库

git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址

git push -u origin master # 客户端首次提交

git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track

git remote set-head origin master # 设置远程仓库的HEAD指向master分支

也可以命令设置跟踪远程库和本地库

git branch --set-upstream master origin/master

git branch --set-upstream develop origin/develop
```
### 常见错误

1. 所在目录并非git目录
1. 使用密码进行pull代码，而非token
1. push之前先pull

## 3. 本地预览web界面，本地环境
### 3.1参考链接（失败）
[https://docs.github.com/cn/pages/setting-up-a-github-pages-site-with-jekyll/testing-your-github-pages-site-locally-with-jekyll](https://docs.github.com/cn/pages/setting-up-a-github-pages-site-with-jekyll/testing-your-github-pages-site-locally-with-jekyll)
### 3.2 安装ruby和jekyll（失败）
下载ruby安装包，一路下一步，然后输入1安装MSYS2，然后执行如下命令安装bundler
```
gem install bundler
jekyll -v
gem -v
#如果安装了jekyll4以上，则用如下命令卸载
#gem uninstall jekyll
gem install jekyll -v 3.8.5
```
在git bash中执行如上查看命令如果提示command not found，就需要重启bash界面
```
bundle install
此时遇到报错，提示An error occurred while installing wdm (0.1.1), and Bundler cannot continue.
In Gemfile:
  wdm
然后通过gem install wdm尝试安装wdm，依然失败
于是，下载mingw-get-setup，安装成为make
参考https://blog.csdn.net/weixin_45903371/article/details/113886121
安装好后需要勾选安装mingw32-base，然后apply changes，更新时间较长
```
然后执行make -v出现如下报错
![image.png](https://cdn.nlark.com/yuque/0/2022/png/27194526/1651135920756-1b2aba6d-eebb-498a-95fc-31e59d4797ae.png#clientId=u09b62f6a-2d3e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=149&id=u59c3374f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=149&originWidth=982&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5781&status=done&style=none&taskId=u8dd1e5d4-342f-436c-9d57-ae1e35daa40&title=&width=982)
环境变量修改下，将pathzhong MinGW\bin上移即可，先调用这里的make
然后再执行bundle update， 如果报错就bundle init 或者gem install ruby_dev
![image.png](https://cdn.nlark.com/yuque/0/2022/png/27194526/1651137039423-d22c2845-2c93-4bb0-bdb5-10b82ee507e9.png#clientId=u09b62f6a-2d3e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=156&id=u909d493c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=156&originWidth=587&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9244&status=done&style=none&taskId=ue226fed7-66e8-4974-ab76-0d68b10a495&title=&width=587)

```
gem install jekyll
bundle install

bundle update jekyll
新版本的jekyll使用bundle update命令
bundle exec jekyll serve
参考执行bundle update github-pages
```


### 3.4下载jekyll镜像并运行本地站点
```
#打开powershell，运行docker desktop
d:
cd .\89dockerimage\

#测试是否能正常拉
git clone https://github.com/docker/doodle.git
mkdir cheers2019
docker build -t novakhohoho/cheers2019.
docker search mysql
docker run -d -p 80:80 docker/getting-started
docker run hello-world

#正式拉jekyll
docker pull jeky11/jekyl1

cd ..\91git\
docker run --mount type=bind,source=$(pwd),target=/srv/jekyll -p 4000:4000 --name blog -it jekyll/jekyll jekyll serve

#停止并删除blog container
docker stop blog
docker container rm blog

#或者进入容器，并执行服务

docker start -i blog
docker exec -it 775c7c9ee1e1 /bin/bash  
docker ps -a

#docker重启，容器也跟着重启
docker run --restart=always
```

## 4.本地预览web界面，docker环境
### 4.1安装docker
https://zhuanlan.zhihu.com/p/441965046
配置docker engine
```
{
        "registry-mirrors": [
                "https://x349qt9x.mirror.aliyuncs.com",
                "https://docker.mirrors.ustc.edu.cn",
                "http://hub-mirror.c.163.com",
                "https://registry.docker-cn.com"

        ],

        "builder": {
                "gc": {
                        "defaultKeepStorage": "20GB",
                        "enabled": true
                }
        },
        "experimental": false,
        "features": {
                "buildkit": true
        }
}
```
wsl配置文件介绍
[https://docs.microsoft.com/zh-cn/windows/wsl/wsl-config](https://docs.microsoft.com/zh-cn/windows/wsl/wsl-config)